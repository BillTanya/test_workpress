name: Deploy to AWS

on:
  push:
    branches:
      - main
    paths:
      - "modules/**"
      - "**.tf"
      - "**.tfvars"
      - "deploy.sh"
      - "terraform.tfstate"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Set the variable to GITHUB_ENV
        run: |
          echo "TF_VAR_RDS_USER_NAME=${{ vars.TF_VAR_RDS_USER_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_RDS_PASSWORD=${{ secrets.TF_VAR_RDS_PASSWORD }}" >> $GITHUB_ENV
          echo "TF_VAR_DB_NAME=${{ vars.TF_VAR_DB_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_REDIS_CLUSTER_ID=${{ vars.TF_VAR_REDIS_CLUSTER_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_KEY_PAIR_NAME=${{ secrets.TF_VAR_KEY_PAIR_NAME }}" >> $GITHUB_ENV
          echo "SITE_PASSWORD=${{ secrets.SITE_PASSWORD }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ vars.AWS_REGION }}" >> $GITHUB_ENV

      - name: Initialize Terraform
        run: terraform init

      - name: Check Terraform State
        id: check_state
        run: |
          if terraform state list | grep -q .; then
            echo "State exists, running terraform refresh..."
            terraform refresh
            echo "TF_STATE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "No state found, proceeding with deployment..."
            echo "TF_STATE_EXISTS=false" >> $GITHUB_ENV
          fi


      - name: Plan Terraform Changes
        if: env.TF_STATE_EXISTS == 'false'
        run: terraform plan -out=tfplan


      - name: Apply Terraform Changes
        if: env.TF_STATE_EXISTS == 'false'
        run: terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: tf_outputs
        run: |
          echo "EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip)" >> $GITHUB_ENV
          echo "RDS_ENDPOINT=$(terraform output -raw rds_endpoint)" >> $GITHUB_ENV
          echo "REDIS_ENDPOINT=$(terraform output -raw redis_endpoint)" >> $GITHUB_ENV

      - name: Save Private Key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > word-press-key.pem
          chmod 400 "word-press-key.pem"

      - name: Deploy to EC2
        run: |
          chmod +x deploy.sh
          ./deploy.sh
